#!/usr/bin/env python3

# look for the Debian package name
try:
    import scapy3k as scapy
except ImportError:
    import scapy

from scapy.all import *
import socket
import os
import time
import json

# change this to whatever interface you are interested in
interface = 'eno1'
filter_bpf = 'udp and port 53'
cache = []

# TODO: this caching could be more robust...
def add_cname_to_cache(cname):
    cname = cname.lower()
    cache.append(cname)

def in_cache(cname):
    cname = cname.lower()
    return cname in cache

def valid_ip(address):
    try: 
        socket.inet_aton(address)
        return True
    except:
        return False

def generate_testssl_report(name, ip_addr):
    """Prepare the bash command and execute with $ip_addr as the target.
        Creates a .json file in ./results/
    """
    # set arguments for flags
    log_dir = './results/'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    # dir/www.example.com_20180307-164136.json
    log_path = log_dir + name + '_' + time.strftime("%Y%m%d-%H%M%S") + '.json'
    severity = 'HIGH' # adjust this according to your level of paranoia
    flags = ' '.join([
            '--vulnerable',
            '--severity ' + severity,
            '--quiet',
            '--nodns',
            '--sneaky',
            '-oJ ' + log_path
    ])
    script_path = './testssl.sh/testssl.sh'
    cmd = " ".join([script_path, flags, ip_addr])
    #TODO: Add threading(?) so that we don't wait on this command
    os.system(cmd)
    return log_path

def grade_https(name, ip):
    # sometimes DNS responses come with a trailing period :(
    if name.endswith('.'): name = name[:-1]

    # generate report and get the path
    report_path = generate_testssl_report(name, ip)
    print ("[+] Report generated: " + report_path)

    # parse json file for grade info
    with open(report_path, 'r') as fh:
        data = json.load(fh)
    for vuln in data['scanResult'][0]['vulnerabilities']:
        out_string = '[!] {}-severity vulnerability found: {}'.format(vuln['severity'], vuln['id'])
        # some vulnerabilities don't have cves
        if 'cve' in vuln:
            out_string += ' ({})'.format(vuln['cve'])

        print (out_string)
    #print(json.dumps(data, indent=4, sort_keys=True))

# this function gets called on all packets that match the sniffer filter
def select_DNS(pkt):
    try:
        if DNSRR in pkt and pkt.sport == 53:
            # assume DNS records will give us ASCII results. look into this later
            name = pkt[DNSQR].qname.decode("ascii").lower() # user asked for this
            answer = pkt[DNSRR].rdata # corresponding IP

            # only grade new requests and ignore reverse DNS
            if not in_cache(name) and 'in-addr' not in name:
                if valid_ip(answer):
                    print('[+] Requested "{}" DNS responded "{}"'.format(name, answer))
                    add_cname_to_cache(name)
                    print ('[+] Evaluating ' + name)
                    # will always be a domain and an ip after above validation
                    grade_https(name, answer)
    except Exception as e:
        print(e)

print ('[**] Beginning "Smell Test"')
sniff(iface=interface, filter=filter_bpf, store=0,  prn=select_DNS)
